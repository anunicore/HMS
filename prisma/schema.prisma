generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String @unique
}

model Patient {
  id            String         @id
  username      String         @unique
  name          String
  surname       String
  email         String?        @unique
  phone         String?        @unique
  address       String
  img           String?
  bloodType     String
  sex           UserSex
  createdAt     DateTime       @default(now())
  parentId      String
  parent        Parent[]
  departmentId  Int
  department    Department     @relation(fields: [departmentId], references: [id])
  attendances   Attendance[]
  prescriptions Prescription[]
  birthday      DateTime
  areas         Areas?         @relation(fields: [areasId], references: [id])
  areasId       Int?
}

model Doctor {
  id             String       @id
  username       String       @unique
  name           String
  surname        String
  email          String?      @unique
  phone          String?      @unique
  address        String
  img            String?
  qualifications String
  sex            UserSex
  createdAt      DateTime     @default(now())
  specialties    Specialty[]
  medicals       Medical[]
  departments    Department[]
  birthday       DateTime
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  patients  Patient[]
}

model Areas {
  id          Int          @id @default(autoincrement())
  tower       String       @unique
  patients    Patient[]
  departments Department[]
}

model Department {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  supervisor    Doctor?        @relation(fields: [supervisorId], references: [id])
  medicals      Medical[]
  patients      Patient[]
  areasId       Int
  areas         Areas          @relation(fields: [areasId], references: [id])
  events        Event[]
  announcements Announcement[]
}

model Specialty {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  doctors  Doctor[]
  medicals Medical[]
}

model Medical {
  id             Int             @id @default(autoincrement())
  name           String
  day            Day
  startTime      DateTime
  endTime        DateTime
  specialtyId    Int
  specialty      Specialty       @relation(fields: [specialtyId], references: [id])
  departmentId   Int
  department     Department      @relation(fields: [departmentId], references: [id])
  doctorId       String
  doctor         Doctor          @relation(fields: [doctorId], references: [id])
  descriptions   Description[]
  medicalResults MedicalResult[]
  attendances    Attendance[]
}

model Description {
  id            Int            @id @default(autoincrement())
  title         String
  startTime     DateTime
  endTime       DateTime
  medicalId     Int
  medical       Medical        @relation(fields: [medicalId], references: [id])
  prescriptions Prescription[]
}

model MedicalResult {
  id            Int            @id @default(autoincrement())
  title         String
  startDate     DateTime
  dueDate       DateTime
  medicalId     Int
  medical       Medical        @relation(fields: [medicalId], references: [id])
  prescriptions Prescription[]
}

model Prescription {
  id              Int           @id @default(autoincrement())
  score           Int
  title           String
  descriptionId   Int?
  description     Description?  @relation(fields: [descriptionId], references: [id])
  medicalResultId Int
  medicalResult   MedicalResult @relation(fields: [medicalResultId], references: [id])
  patientId       String
  patient         Patient       @relation(fields: [patientId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  patientId String
  patient   Patient  @relation(fields: [patientId], references: [id])
  medicalId Int
  medical   Medical  @relation(fields: [medicalId], references: [id])
}

model Event {
  id           Int         @id @default(autoincrement())
  title        String
  description  String
  startTime    DateTime
  endTime      DateTime
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
}

model Announcement {
  id           Int         @id @default(autoincrement())
  title        String
  description  String
  date         DateTime
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
